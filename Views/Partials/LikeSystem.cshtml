@model Umbraco.Cms.Core.Models.PublishedContent.IPublishedContent
@{
    // Get the current content ID which will be liked
    var contentId = Model.Id;
}

<div class="like-button-container">
    <button id="likeButton-@contentId" class="like-button" data-content-id="@contentId">
        <svg class="icon icon-heart" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="#8B2C4B" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z" />
        </svg>
    </button>
</div>


<script>
    document.addEventListener('DOMContentLoaded', function() {
        const likeButton = document.getElementById('likeButton-@contentId');
        const contentId = likeButton.getAttribute('data-content-id');
        
        // LocalStorage key for liked items
        const STORAGE_KEY = 'user_liked_items';
        
        // Check if this content is already liked
        checkIfLiked();
        
        // Toggle like when button is clicked
        likeButton.addEventListener('click', function(e) {
            e.preventDefault();
            
            const isLiked = toggleLike(contentId);
            
            // Update UI to show liked state
            if (isLiked) {
                likeButton.classList.add('liked');
            } else {
                likeButton.classList.remove('liked');
            }
            
            // Dispatch custom event so the counter can update
            document.dispatchEvent(new CustomEvent('likesUpdated'));
        });
        
        // Get likes from local storage
        function getLikedItems() {
            const storedLikes = localStorage.getItem(STORAGE_KEY);
            return storedLikes ? JSON.parse(storedLikes) : [];
        }
        
        // Save likes to local storage
        function saveLikedItems(likes) {
            localStorage.setItem(STORAGE_KEY, JSON.stringify(likes));
        }
        
        // Toggle like state for a content item
        function toggleLike(id) {
            const likes = getLikedItems();
            const index = likes.indexOf(parseInt(id));
            
            if (index !== -1) {
                // Unlike
                likes.splice(index, 1);
                saveLikedItems(likes);
                return false;
            } else {
                // Like
                likes.push(parseInt(id));
                saveLikedItems(likes);
                return true;
            }
        }
        
        // Check if the current item is liked
        function checkIfLiked() {
            const likes = getLikedItems();
            if (likes.includes(parseInt(contentId))) {
                likeButton.classList.add('liked');
            } else {
                likeButton.classList.remove('liked');
            }
        }
    });
</script>